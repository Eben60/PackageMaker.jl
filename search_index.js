var documenterSearchIndex = {"docs":
[{"location":"","page":"Documentation","title":"Documentation","text":"(Image: License: MIT) (Image: Documentation)  (Image: Build Status) (Image: Coverage) (Image: Aqua QA)","category":"page"},{"location":"#PackageMaker","page":"Documentation","title":"PackageMaker","text":"","category":"section"},{"location":"","page":"Documentation","title":"Documentation","text":"GUI for PkgTemplates.jl: \"Creating new Julia packages, the easy way\" - made a bit simpler.","category":"page"},{"location":"","page":"Documentation","title":"Documentation","text":"This package allows you to create either a new package or a new project. It implements a subset of PkgTemplates.jl features (which subset hopefully covers >90% of its use cases). It also adds a couple of features of its own, e.g. ability to create Julia projects, to create repositories on the GitHub, or to add dependencies to a project or package being created. Being a GUI app, it should be mostly self-explanatory, and external links for more information are provided from the GUI, too.","category":"page"},{"location":"#Installation","page":"Documentation","title":"Installation","text":"","category":"section"},{"location":"","page":"Documentation","title":"Documentation","text":"It is recommended to install this package into a separate shared environment, e.g. one named @PackageMaker. It is not advisable to install it into the default environment.","category":"page"},{"location":"","page":"Documentation","title":"Documentation","text":"julia> ]\n(@v1.11) pkg> activate @PackageMaker\n  Activating new project at `~/.julia/environments/PackageMaker`\n\n(@PackageMaker) pkg> add PackageMaker","category":"page"},{"location":"","page":"Documentation","title":"Documentation","text":"The package ShareAdd.jl can help you with using shared environments: For both installation and usage of PackageMaker, type:","category":"page"},{"location":"","page":"Documentation","title":"Documentation","text":"julia> using ShareAdd\njulia> @usingany PackageMaker","category":"page"},{"location":"","page":"Documentation","title":"Documentation","text":"Before you start, make sure that you set up global user.name, user.email, as well as  (in case you are to use GitHub-bound plugins) github.user in git.","category":"page"},{"location":"#Usage","page":"Documentation","title":"Usage","text":"","category":"section"},{"location":"","page":"Documentation","title":"Documentation","text":"julia> ]\n(@v1.11) pkg> activate @PackageMaker\n\njulia> using PackageMaker\n\njulia> gogui() ","category":"page"},{"location":"","page":"Documentation","title":"Documentation","text":"Then fill out the GUI form and press \"Submit\". The project/package will be created. ","category":"page"},{"location":"","page":"Documentation","title":"Documentation","text":"By default the function gogui() will exit Julia after a successfull finish. If such behavior is undesirable, call it as gogui(false).","category":"page"},{"location":"#Multiline-fields","page":"Documentation","title":"Multiline fields","text":"","category":"section"},{"location":"","page":"Documentation","title":"Documentation","text":"Some PkgTemplates.jl plugin arguments are expected to be a Vector{String}, and PackageMaker implements this using textarea fields, enabling multiline input. Due to a technical issue, multiline text cannot be filled in from a saved configuration. As a workaround, both newlines and commas, and combinations thereof are allowed as separators (and adjacent whitespaces are ignored). On reading from a saved configuration, the elements of a vector of strings will be separated by comma/whitespace combinations, e.g. a list of Julia versions for GitHubActions plugin would look like","category":"page"},{"location":"","page":"Documentation","title":"Documentation","text":"1.6, 1.10, pre","category":"page"},{"location":"","page":"Documentation","title":"Documentation","text":"In multiline fields, commas can be escaped by double-backslash: comma\\\\,connected will be parsed as \"comma,connected\"","category":"page"},{"location":"#Packages-to-be-added-to-project","page":"Documentation","title":"Packages to be added to project","text":"","category":"section"},{"location":"","page":"Documentation","title":"Documentation","text":"For this multiline field everything said above about separators applies (except this field is not saved on saving a config). Additionally keywords using and import as well as the suffix .jl will be ignored, making it easier to paste package lists copied from e.g. another package. Thus, the input below","category":"page"},{"location":"","page":"Documentation","title":"Documentation","text":"using P1, P2\nimport P3\nP4.jl, P5.jl\nP6,\nP7","category":"page"},{"location":"","page":"Documentation","title":"Documentation","text":"will be successfully parsed as a list \"P1\" .. \"P7\"","category":"page"},{"location":"#Creating-remote-repository-on-GitHub","page":"Documentation","title":"Creating remote repository on GitHub","text":"","category":"section"},{"location":"","page":"Documentation","title":"Documentation","text":"This feature will be available in the v1.2.0, to be released soon ","category":"page"},{"location":"","page":"Documentation","title":"Documentation","text":"This feature is only available if GitHub CLI is installed (installation instructions) and configured on your computer. There are many ways to install it: If you already have one of the supported package managers, you may use it, otherwise you could try Webi.","category":"page"},{"location":"","page":"Documentation","title":"Documentation","text":"After installation, you will need to authentificate gh to your GitHub account, e.g. by running gh auth login and following instructions.","category":"page"},{"location":"","page":"Documentation","title":"Documentation","text":"Now you will be able to check Create GitHub repo checkbox (do not forget checking Git plugin as well), and on creating a project, also a remote empty repo of the same name will be created.","category":"page"},{"location":"","page":"Documentation","title":"Documentation","text":"If you are using VSCode, you may open the just created package or project in a new window, switch to it's environment, commit the changes, and click onto \"Publich Branch\" button - all contents will be now pushed to your newly created GitHub repo.","category":"page"},{"location":"#Saving-configurations","page":"Documentation","title":"Saving configurations","text":"","category":"section"},{"location":"","page":"Documentation","title":"Documentation","text":"It is possible to save a configuration for a later reuse. The configurations are saved with the help of Preferences.jl, which by default would save them into LocalPreferences.toml file next to the currently-active project. You can manually edit the file to e.g. delete some config.","category":"page"},{"location":"","page":"Documentation","title":"Documentation","text":"Not saved are: Project/Package name, package info (docstring), and packages to be added to project/package, as these are specific to each project.","category":"page"},{"location":"","page":"Documentation","title":"Documentation","text":"A configuration is saved and applied according to the following logic: Only those parameters which were changed respective to the default values are saved/applied. That means, you can independently save several configs, dealing with different aspects, then sequentially apply them. E.g. you can save in a config \"Lab user data\" only the user name/email specific to some context, and in a config \"Public documentation\" the Documenter plugin settings. Then you can apply them one after another, and you will have both.","category":"page"},{"location":"","page":"Documentation","title":"Documentation","text":"This logics however (currently) differs in respect to the selection of \"activated\" state of all plugins. Each config saves selection state of all plugins, and applies all of them. In the example above, the plugins will be selected/unselected according to the state saved in the \"Public documentation\" config, if it was applied last.","category":"page"},{"location":"#Checking-for-updates","page":"Documentation","title":"Checking for updates","text":"","category":"section"},{"location":"","page":"Documentation","title":"Documentation","text":"On the startup of the package a check is performed whether a new version of it became available. This feature is still experimental, and appears not always to work properly. ","category":"page"},{"location":"","page":"Documentation","title":"Documentation","text":"You might find this function too intrusive. The public function PackageMaker.updatecheck_settings provides an interface to disable this feature or to change other  defaults. For details, get the function's help:","category":"page"},{"location":"","page":"Documentation","title":"Documentation","text":"help?> PackageMaker.updatecheck_settings","category":"page"},{"location":"#Current-issues","page":"Documentation","title":"Current issues","text":"","category":"section"},{"location":"","page":"Documentation","title":"Documentation","text":"There may be a problem if run from Julia in terminal on Ubuntu 24, due to an upstream bug.  If possible, in such a case run the package from VSCode, then it should work. Otherwise run the macro @unsafe, which would disable Electron  sandboxing. To be on the safe side, make sure to terminate Julia after creating a package (which is actually the default behavior of gogui()).","category":"page"},{"location":"","page":"Documentation","title":"Documentation","text":"julia> @unsafe;\njulia> gogui()","category":"page"},{"location":"#Tangential-Notes","page":"Documentation","title":"Tangential Notes","text":"","category":"section"},{"location":"#Julia-workflow","page":"Documentation","title":"Julia workflow","text":"","category":"section"},{"location":"","page":"Documentation","title":"Documentation","text":"I have found these sources especially useful","category":"page"},{"location":"","page":"Documentation","title":"Documentation","text":"Julia Notes\nModern Julia Workflows","category":"page"},{"location":"#Start-with-a-project-or-a-package?","page":"Documentation","title":"Start with a project or a package?","text":"","category":"section"},{"location":"","page":"Documentation","title":"Documentation","text":"First, for anything exceeding a few-lines calculation, a bare script is not optimal in Julia. You may need multiple packages, and it is not a good thing to install them all in the same default environment. Furthermore, there are reasons to put everything into functions. As soon a you start putting your code into functions, you should use Revise.jl. You will find these advices in literally every guide on Julia.","category":"page"},{"location":"","page":"Documentation","title":"Documentation","text":"Most manuals (including the both cited above) would explain you how to create an environment / project, before going on to creation of local packages. With PackageMaker you can both create projects and packages.","category":"page"},{"location":"","page":"Documentation","title":"Documentation","text":"However I see actually no reasons to making it a project. PackageMaker would make a package for you at zero additional cost.","category":"page"},{"location":"#A-*package*-offers-you-following-benefits:","page":"Documentation","title":"A package offers you following benefits:","text":"","category":"section"},{"location":"","page":"Documentation","title":"Documentation","text":"First and foremost: A function put into the package module will be under Revise\nupon using MyPackage, it will be easily accessible from REPL, and can be used in any script\nany changes to the function will be immediately reflected in the REPL or script.\nFor testing a package there are well established workflows (tick the Tests plugin to create and populate the /test folder).\nPackage is a more-or-less self-contained unit, which can be\nused by your other scripts and packages\nshared\npublished as a registered package.","category":"page"},{"location":"#Register-a-package:-v1.0.0-or-v0.1.0?","page":"Documentation","title":"Register a package: v1.0.0 or v0.1.0?","text":"","category":"section"},{"location":"","page":"Documentation","title":"Documentation","text":"The underlying PkgTemplates.jl package, sets the default value for the version of the package being created to v1.0.0-DEV (which was changed from v0.1.0 a while ago). There has also been some discussions that it is desirable to register new packages with 1. versions from the beginning.","category":"page"},{"location":"","page":"Documentation","title":"Documentation","text":"However the vast majority of new packages is still registered with v0.1.0. Ironically, PkgTemplates.jl itself is still on v0.7.55. ","category":"page"},{"location":"","page":"Documentation","title":"Documentation","text":"The default package version number in PackageMaker is set to v0.0.1, which seems appropriate for a package without yet a single line of own code. As v0.0.1 will not be accepted anyway for package registration, the package author would have to decide himself whether to change it to v0.1 or v1.0.","category":"page"},{"location":"#Using-a-package?-Star-it","page":"Documentation","title":"Using a package? - Star it 🙂","text":"","category":"section"},{"location":"","page":"Documentation","title":"Documentation","text":"PackageMaker allows you to add dependencies at package creation. If you know you need this or that dependency even before you wrote the first code line, then you probably already know this package does it`s job. Which IMO is a reason enough to give it a star.","category":"page"},{"location":"","page":"Documentation","title":"Documentation","text":"Stars on GitHub is often the only feedback the developer gets, esp. if his package \"just works\". And feedback is often the only reward for an open source developer.","category":"page"},{"location":"","page":"Documentation","title":"Documentation","text":"Therefore: If you typed a name of some package into the \"Packages to add to your project\" field - think about going to the package's source page to give it a star. ","category":"page"},{"location":"#Changelog","page":"Documentation","title":"Changelog","text":"","category":"section"},{"location":"#Release-1.2.0","page":"Documentation","title":"Release 1.2.0","text":"","category":"section"},{"location":"","page":"Documentation","title":"Documentation","text":"to be released soon ","category":"page"},{"location":"","page":"Documentation","title":"Documentation","text":"Added option to create GitHub repository.\nDisabling some inputs depending on context.\nInternal refactoring WIP.","category":"page"},{"location":"#Release-1.1.1","page":"Documentation","title":"Release 1.1.1","text":"","category":"section"},{"location":"","page":"Documentation","title":"Documentation","text":"2025-04-20 ","category":"page"},{"location":"","page":"Documentation","title":"Documentation","text":"Fixed a bug which prevented in some cases adding .jl suffix to project folder if this option was selected.\nExtended test suite.\nAdded codecov.io coverage to CI.","category":"page"},{"location":"#Release-1.1.0","page":"Documentation","title":"Release 1.1.0","text":"","category":"section"},{"location":"","page":"Documentation","title":"Documentation","text":"2025-04-13 ","category":"page"},{"location":"","page":"Documentation","title":"Documentation","text":"Added option for versioned manifests.\nAdded option for .jl suffix for project folder.","category":"page"},{"location":"#Release-1.0.1","page":"Documentation","title":"Release 1.0.1","text":"","category":"section"},{"location":"","page":"Documentation","title":"Documentation","text":"2025-04-11 ","category":"page"},{"location":"","page":"Documentation","title":"Documentation","text":"Improved package loading time through precompile.\nSome internal refactoring.","category":"page"},{"location":"#Release-1.0.0","page":"Documentation","title":"Release 1.0.0","text":"","category":"section"},{"location":"","page":"Documentation","title":"Documentation","text":"2025-04-07 ","category":"page"},{"location":"","page":"Documentation","title":"Documentation","text":"Package documentation extended and published using Documenter. \n(No breaking changes)","category":"page"},{"location":"#Releases-0.1.1-..-0.1.17","page":"Documentation","title":"Releases 0.1.1 .. 0.1.17","text":"","category":"section"},{"location":"","page":"Documentation","title":"Documentation","text":"Work in progress 😓","category":"page"},{"location":"#Initial-release-0.1.0","page":"Documentation","title":"Initial release  0.1.0","text":"","category":"section"},{"location":"","page":"Documentation","title":"Documentation","text":"2025-01-05","category":"page"},{"location":"#Likes-and-dislikes?","page":"Documentation","title":"Likes & dislikes?","text":"","category":"section"},{"location":"","page":"Documentation","title":"Documentation","text":"Star on GitHub, open an issue, contact me on Julia Discourse.","category":"page"},{"location":"#Related-packages","page":"Documentation","title":"Related packages","text":"","category":"section"},{"location":"","page":"Documentation","title":"Documentation","text":"PkgTemplates, for which this package is a front end.\nJulia's own Pkg generate is sufficient to generate you the bare minimum files for a new package.\nPkgSkeleton is a rather minimalistic package for creating new packages and updating existing ones, following common practices and workflow recommendations.\nBestieTemplate uses Copier library over PythonCall and can be used to both create and update packages.\nCookiecutter Template - still another Python based solution.","category":"page"},{"location":"#Copyright-and-License","page":"Documentation","title":"Copyright and License","text":"","category":"section"},{"location":"","page":"Documentation","title":"Documentation","text":"© 2025 Eben60","category":"page"},{"location":"","page":"Documentation","title":"Documentation","text":"MIT License (see separate file LICENSE)","category":"page"}]
}
