var documenterSearchIndex = {"docs":
[{"location":"#PackageMaker","page":"General Info","title":"PackageMaker","text":"","category":"section"},{"location":"","page":"General Info","title":"General Info","text":"GUI for PkgTemplates.jl: \"Creating new Julia packages, the easy way\" - made a bit simpler.","category":"page"},{"location":"","page":"General Info","title":"General Info","text":"This package allows you to create either a new package or a new project. It implements a subset of PkgTemplates.jl features (which subset hopefully covers >90% of its use cases). It also adds a couple of features of its own, e.g. ability to create Julia projects, or adding dependencies to project or packages being created. Being a GUI app, it should be mostly self-explanatory, and external links for more information are provided from the GUI, too.","category":"page"},{"location":"#Installation","page":"General Info","title":"Installation","text":"","category":"section"},{"location":"","page":"General Info","title":"General Info","text":"It is recommended to install this package into a separate shared environment, e.g. one named @PackageMaker. It is not advisable to install it into the default environment.","category":"page"},{"location":"","page":"General Info","title":"General Info","text":"julia> ]\n(@v1.11) pkg> activate @PackageMaker\n  Activating new project at `~/.julia/environments/PackageMaker`\n\n(@PackageMaker) pkg> add PackageMaker","category":"page"},{"location":"","page":"General Info","title":"General Info","text":"The package ShareAdd.jl can help you with using shared environments: For both installation and usage of PackageMaker, type:","category":"page"},{"location":"","page":"General Info","title":"General Info","text":"julia> using ShareAdd\njulia> @usingany PackageMaker","category":"page"},{"location":"","page":"General Info","title":"General Info","text":"Before you start, make sure that you set up global user.name, user.email, as well as  (in case you are to use GitHub-bound plugins) github.user in git.","category":"page"},{"location":"#Usage","page":"General Info","title":"Usage","text":"","category":"section"},{"location":"","page":"General Info","title":"General Info","text":"julia> ]\n(@v1.11) pkg> activate @PackageMaker\n\njulia> using PackageMaker\n\njulia> gogui() ","category":"page"},{"location":"","page":"General Info","title":"General Info","text":"Then fill out the GUI form and press \"Submit\". The project/package will be created. ","category":"page"},{"location":"","page":"General Info","title":"General Info","text":"By default the function gogui() will exit Julia after a successfull finish. If such behavior is undesirable, call it as gogui(false).","category":"page"},{"location":"#Multiline-fields","page":"General Info","title":"Multiline fields","text":"","category":"section"},{"location":"","page":"General Info","title":"General Info","text":"Some PkgTemplates.jl plugin arguments are expected to be a Vector{String}, and PackageMaker implements this using textarea fields, enabling multiline input. Due to a technical issue, multiline text cannot be filled in from a saved configuration. As a workaround, both newlines and commas, and combinations thereof are allowed as separators (and adjacent whitespaces are ignored). On reading from a saved configuration, the elements of a vector of strings will be separated by comma/whitespace combinations, e.g. a list of Julia versions for GitHubActions plugin would look like","category":"page"},{"location":"","page":"General Info","title":"General Info","text":"1.6, 1.10, pre","category":"page"},{"location":"","page":"General Info","title":"General Info","text":"In multiline fields, commas can be escaped by double-backslasch: comma\\\\,connected will be parsed as \"comma,connected\"","category":"page"},{"location":"#Packages-to-be-added-to-project","page":"General Info","title":"Packages to be added to project","text":"","category":"section"},{"location":"","page":"General Info","title":"General Info","text":"For this multiline field everything said above about separators applies (except this field is not saved on saving a config). Additionaly keywords using and import as well as the suffix .jl will be ignored, making it easier to paste package lists copied from e.g. another package. Thus, the input below","category":"page"},{"location":"","page":"General Info","title":"General Info","text":"using P1, P2\nimport P3\nP4.jl, P5.jl\nP6,\nP7","category":"page"},{"location":"","page":"General Info","title":"General Info","text":"will be successfully parsed as a list \"P1\" .. \"P7\"","category":"page"},{"location":"#Saving-configurations","page":"General Info","title":"Saving configurations","text":"","category":"section"},{"location":"","page":"General Info","title":"General Info","text":"It is possible to save a configuration for a later reuse. The configurations are saved with the help of Preferences.jl, which by default would save them into LocalPreferences.toml file next to the currently-active project. You can manually edit the file to e.g. delete some config.","category":"page"},{"location":"","page":"General Info","title":"General Info","text":"Not saved are: Project/Package name, package info (docstring), and packages to be added to project/package, as these are specific to each project.","category":"page"},{"location":"","page":"General Info","title":"General Info","text":"A configuration is saved and applied according to the following logic: Only those parameters which were changed respective to the default values are saved/applied. That means, you can independently save several configs, dealing with different aspects, then sequentially apply them. E.g. you can save in a config \"Lab user data\" only the user name/email specific to some context, and in a config \"Public documentation\" the Documenter plugin settings. Then you can apply them one after another, and you will have both.","category":"page"},{"location":"","page":"General Info","title":"General Info","text":"This logics however (currently) differs in respect to the selection of \"activated\" state of all plugins. Each config saves selection state of all plugins, and applies all of them. In the example above, the plugins will be selected/unselected according to the state saved in the \"Public documentation\" config, if it was applied last.","category":"page"},{"location":"#Checking-for-updates","page":"General Info","title":"Checking for updates","text":"","category":"section"},{"location":"","page":"General Info","title":"General Info","text":"On the startup of the package a check is performed whether a new version of it became available. This feature is still experimental, and appears not always to work properly (possibly, if PackageMaker was imported through @usingany PackageMaker macro of ShareAdd.jl). ","category":"page"},{"location":"","page":"General Info","title":"General Info","text":"You might find this function too intrusive. The public function PackageMaker.updatecheck_settings provides an interface to disable this feature or to change other  defaults. For details, get the function's help:","category":"page"},{"location":"","page":"General Info","title":"General Info","text":"help?> PackageMaker.updatecheck_settings","category":"page"},{"location":"#Current-issues","page":"General Info","title":"Current issues","text":"","category":"section"},{"location":"","page":"General Info","title":"General Info","text":"There may be a problem if run from Julia in terminal on Ubuntu 24, due to an upstream bug.  If possible, in such a case run the package from VSCode, then it should work. Otherwise run the macro @unsafe, which would disable Electron  sandboxing. To be on the safe side, make sure to terminate Julia after creating a package (which is actually the default behavior of gogui()).","category":"page"},{"location":"","page":"General Info","title":"General Info","text":"julia> @unsafe;\njulia> gogui()","category":"page"}]
}
